
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://fbgxecrbqulrywfgfufr.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZiZ3hlY3JicXVscnl3ZmdmdWZyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMwNTE4NDksImV4cCI6MjA1ODYyNzg0OX0.Sq7VUuhjpM5ZUGoL4dvjP514EwaLJTUXDL_7COtNqxQ";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

/**
 * Standard select statement for products with their related data
 */
export const PRODUCT_SELECT = `
  id, 
  title, 
  description, 
  price, 
  original_price, 
  category, 
  subcategory,
  rating, 
  review_count, 
  is_new, 
  on_sale, 
  stock,
  product_images (
    id,
    image_url, 
    is_primary, 
    display_order
  ),
  product_features (
    id,
    feature,
    display_order
  ),
  product_specifications (
    id,
    specification_key,
    specification_value
  )
`;

/**
 * Fetch a single product with all its related data
 */
export const fetchProduct = async (productId: string) => {
  const { data, error } = await supabase
    .from('products')
    .select(PRODUCT_SELECT)
    .eq('id', productId)
    .single();

  if (error) {
    console.error('Error fetching product:', error);
    throw error;
  }

  return data;
};

/**
 * Check if any products exist in the database
 */
export const countAllProducts = async (): Promise<number> => {
  const { count, error } = await supabase
    .from('products')
    .select('*', { count: 'exact', head: true });
  
  if (error) {
    console.error('Error counting products:', error);
    return 0;
  }
  
  return count || 0;
};

/**
 * Fetch multiple products with their related data
 * @param options Query options like category, limit, etc.
 */
export const fetchProducts = async (options: {
  category?: string | null;
  subcategory?: string | null;
  isNew?: boolean;
  onSale?: boolean;
  limit?: number;
  offset?: number;
  orderBy?: { column: string; ascending: boolean };
} = {}) => {
  console.log("fetchProducts called with options:", options);
  
  // Validate that options is an object
  if (typeof options !== 'object' || options === null) {
    console.error("Invalid options provided to fetchProducts:", options);
    options = {};
  }

  // Fix potential issue where category is an object with "_type": "undefined"
  if (options.category && typeof options.category === 'object' && 'value' in (options.category as any)) {
    options.category = undefined;
  }

  // Fix potential issue where subcategory is an object with "_type": "undefined"
  if (options.subcategory && typeof options.subcategory === 'object' && 'value' in (options.subcategory as any)) {
    options.subcategory = undefined;
  }
  
  let query = supabase
    .from('products')
    .select(PRODUCT_SELECT);

  // Apply filters
  if (options.category && typeof options.category === 'string') {
    query = query.eq('category', options.category);
    console.log(`Filtering by category: ${options.category}`);
  }

  if (options.subcategory && typeof options.subcategory === 'string') {
    // Use ilike for more flexible matching
    query = query.ilike('subcategory', `%${options.subcategory}%`);
    console.log(`Filtering by subcategory: ${options.subcategory}`);
  }

  if (options.isNew !== undefined) {
    query = query.eq('is_new', options.isNew);
  }

  if (options.onSale !== undefined) {
    query = query.eq('on_sale', options.onSale);
  }

  // Apply ordering
  if (options.orderBy) {
    query = query.order(options.orderBy.column, { 
      ascending: options.orderBy.ascending 
    });
  } else {
    // Default ordering
    query = query.order('created_at', { ascending: false });
  }

  // Apply pagination
  if (options.limit) {
    query = query.limit(options.limit);
  } else {
    // Default limit to ensure we don't fetch too many records
    query = query.limit(500); // Increased default limit
  }

  if (options.offset) {
    query = query.range(options.offset, options.offset + (options.limit || 500) - 1);
  }

  console.log("Executing query for category:", options.category);
  const { data, error } = await query;

  if (error) {
    console.error('Error fetching products:', error);
    throw error;
  }

  console.log(`fetchProducts returned ${data?.length || 0} products for category: ${options.category || 'all'}`);
  
  // Log the categories of returned products for debugging
  if (data && data.length > 0) {
    const categories = [...new Set(data.map(p => p.category))];
    console.log('Categories found:', categories);
    
    // Additional logging for debugging
    console.log('First product sample:', {
      id: data[0].id,
      title: data[0].title,
      category: data[0].category,
      images: data[0].product_images?.length || 0
    });
  } else {
    console.log(`No products found for category: ${options.category || 'all'}`);
    
    // Let's check if this category exists in the database at all
    if (options.category) {
      checkCategoryExists(options.category);
    }
  }
  
  return data || [];
};

/**
 * Helper function to check if a category exists in the database
 */
const checkCategoryExists = async (category: string) => {
  console.log(`Checking if category '${category}' exists in the database...`);
  
  const { data, error, count } = await supabase
    .from('products')
    .select('category', { count: 'exact' })
    .eq('category', category);
    
  if (error) {
    console.error('Error checking category:', error);
    return;
  }
  
  console.log(`Category check results: found ${count} products with category '${category}'`);
  
  // If no products found, let's list all available categories
  if (!count || count === 0) {
    const { data: allCategories } = await supabase
      .from('products')
      .select('category')
      .limit(100);
      
    if (allCategories && allCategories.length > 0) {
      const uniqueCategories = [...new Set(allCategories.map(p => p.category))];
      console.log('All available categories in database:', uniqueCategories);
    } else {
      console.log('No categories found in the database.');
    }
  }
};

/**
 * Fetch featured products (highest rated)
 */
export const fetchFeaturedProducts = async (limit: number = 8) => {
  return fetchProducts({
    limit,
    orderBy: { column: 'rating', ascending: false }
  });
};

/**
 * Fetch new arrivals
 */
export const fetchNewArrivals = async (limit: number = 8) => {
  return fetchProducts({
    isNew: true,
    limit,
    orderBy: { column: 'created_at', ascending: false }
  });
};

/**
 * Fetch on sale products
 */
export const fetchSaleProducts = async (limit: number = 8) => {
  return fetchProducts({
    onSale: true,
    limit,
    orderBy: { column: 'price', ascending: true }
  });
};

/**
 * Fetch products by subcategory
 */
export const fetchProductsBySubcategory = async (subcategory: string, limit: number = 20) => {
  return fetchProducts({
    subcategory,
    limit
  });
};

/**
 * Debug function to fetch all products
 */
export const fetchAllProducts = async (limit: number = 500) => {
  console.log(`Fetching all products with limit ${limit}`);
  
  const { data, error } = await supabase
    .from('products')
    .select(PRODUCT_SELECT)
    .limit(limit);

  if (error) {
    console.error('Error fetching all products:', error);
    throw error;
  }

  console.log(`fetchAllProducts returned ${data?.length || 0} products`);
  if (data && data.length > 0) {
    const categories = [...new Set(data.map(p => p.category))];
    console.log('Categories in all products:', categories);
    
    // Group products by category for debugging
    const productsByCategory = {};
    data.forEach(product => {
      if (!productsByCategory[product.category]) {
        productsByCategory[product.category] = 0;
      }
      productsByCategory[product.category]++;
    });
    
    console.log('Products count by category:', productsByCategory);
  }
  
  return data || [];
};

/**
 * Count products by category
 */
export const countProductsByCategory = async (category: string) => {
  const { count, error } = await supabase
    .from('products')
    .select('id', { count: 'exact', head: true })
    .eq('category', category);

  if (error) {
    console.error('Error counting products:', error);
    throw error;
  }

  return count || 0;
};

/**
 * Manual check and load of sample products in the database if needed
 */
export const checkAndLoadSampleProducts = async () => {
  console.log("Checking if products need to be loaded...");
  
  const count = await countAllProducts();
  console.log(`Found ${count} products in the database`);
  
  if (count === 0) {
    console.log("No products found, loading sample products...");
    try {
      const { loadSampleProducts } = await import('@/data/products');
      await loadSampleProducts();
      console.log("Sample products loaded successfully");
      return true;
    } catch (error) {
      console.error("Error loading sample products:", error);
      return false;
    }
  }
  
  console.log("Products already exist in the database");
  return false;
};
